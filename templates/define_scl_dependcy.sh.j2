#!/usr/bin/bash
PREFIX="miracle-awxrpm"
ARCH="linux-x86_64"

# Create the metapackage

rpmbuild -ba /var/awxrpm/scl/awxrpm.scl.spec 
createrepo /root/rpmbuild/RPMS/
yum clean all
yum install -y awxrpm-runtime 
mkdir -p /opt/miracle/awxrpm/miracle-awxrpm
ln -s /opt/rh/miracle-awxrpm/enable /opt/miracle/awxrpm/miracle-awxrpm/enable


PACKAGEDIR="/tmp/awx/packages"

PACKAGES=`ls -1 ${PACKAGEDIR} | tr 'A-Z' 'a-z'`
COUNT=0
LOOP="TRUE"
#Continue to extract dependencies by installing packages
while [[ $LOOP == "TRUE" ]];
do	
	LOOP="FALSE"
	#Run throug all packages 
	for PACKAGE in $PACKAGES
	do
		cd ${PACKAGEDIR}/${PACKAGE}
		PACKAGEINFO=`find . -type d -path './*' -prune -print |cut -c 3-`  
		NAME=`echo $PACKAGEINFO | awk -F'-' '{ print $1 }'`
		VERS=`echo $PACKAGEINFO | awk -F'-' '{ print $2 }'`
		cd ${PACKAGEDIR}/${PACKAGE}/${PACKAGEINFO}
		ls  |grep  PKG-INFO >/dev/null 2>&1
		if [[ $? == 0 ]];
		then 	
			cp PKG-INFO ${PACKAGEDIR}/${PACKAGE}/${PACKAGEINFO}.PKG-INFO
		else
			echo "Autogenerated due to lack of PKG-INFO file" > ${PACKAGEDIR}/${PACKAGE}/${PACKAGEINFO}.PKG-INFO
		fi
	
		if [[ -f ${PACKAGEDIR}/${PACKAGE}/pipfreeze.virgin.txt ]];
		then
					echo "$COUNT `date`: $PACKAGE : cached" >/dev/null 2>&1
		else
			#Refresh the environment in order to make a clean install
			/usr/bin/rm -r /tmp/testvenv >/dev/null 2>&1	
			python3.8 -m venv /tmp/testvenv
			source /tmp/testvenv/bin/activate >/dev/null 2>&1
			touch ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep
			for DEP in `cat ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep`
			do
				pip install $DEP >/dev/null 2>&1
				if [[ $? == 0 ]];
				then 
					echo "$COUNT `date`: $PACKAGE dependend on $DEP : installed"
				else	
					echo "$COUNT `date`: $DEP ERROR: failed to install"
					exit
				fi
			done
			#install the python package with pip
			pip install . >/dev/null 2>&1
			if [[ $? == 0 ]];
			then
				#If we succeed we have a pip freeze with package dep
				echo "`date`: $PACKAGE pip install succeeded"
				pip freeze > ${PACKAGEDIR}/${PACKAGE}/pipfreeze.virgin.txt
			else
				#Try with setup.py install	
				python setup.py install   >/dev/null 2>&1
				python setup.py install  >  ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.log 2>${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err
				if [[ $? == 0 ]];
				then
					echo "`date`: $PACKAGE build succeeded"
				#If we succeed we have a pip freeze with package dep
					pip freeze > ${PACKAGEDIR}/${PACKAGE}/pipfreeze.virgin.txt
				else
					echo "$COUNT `date`: $PACKAGE : build failed"
					echo "--------------------------------------------------------------------------------"
					cat ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err
					echo "--------------------------------------------------------------------------------"
					rm ${PACKAGEDIR}/${PACKAGE}/pipfreeze.virgin.txt >/dev/null 2>&1
					cat ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err |grep "No module named" |awk -F"'" '{ print $2 }'  |sort -u >> ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep
					#append dependent packages if the stderr reveils them

					grep "No such file or directory" ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err >/dev/null 2>&1
					if [[ $? == 0 ]];
					then
						FILENAME=`grep "No such file or directory" ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err  |awk -F"'" '{ print $2 }'`
						touch  $FILENAME
						#Hack to create "things that should not have been forgotten"
					fi


					grep "pyasn1" ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err >/dev/null 2>&1
					if [[ $? == 0 ]];
					then 
						#if this text is in the error message you probably need the cryptographi module"
						echo "cryptography" >> ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep
					fi

					cat ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep  |sort -u >${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep.new
					mv ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep.new ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep
					LOOP="TRUE"
					#tail ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err
				fi
			fi
		fi
	done
	COUNT=$((COUNT+1))
done


#at this step alle packages are installed
#Create a list of dependent packages for each file
for PACKAGE in $PACKAGES
do
	cd ${PACKAGEDIR}/${PACKAGE}
	PACKAGEINFO=`find . -type d -path './*' -prune -print |cut -c 3-`  
	NAME=`echo $PACKAGEINFO | awk -F'-' '{ print $1 }'`
	VERS=`echo $PACKAGEINFO | awk -F'-' '{ print $2 }'`
	cat *txt  |grep -iv "${PACKAGE}==" |wc -l |grep "^0$" >/dev/null 2>&1
	if [[ $? == 0 ]];
	then
		echo "$COUNT `date`: $PACKAGE : no dependencies" >/dev/null 2>&1
	else
		DEPEND_ON=`cat *txt  |grep -v "${PACKAGE}==" |tr '\n' ','| tr -d ' ' `
		echo "$COUNT `date`: $PACKAGE : depends on $DEPEND_ON"
		for DEPPKG in `echo $DEPEND_ON|tr ',' '\n'`
		do
			echo $DEPPKG
		done
	fi
done

echo "#!/usr/bin/env bash" > /tmp/builder.sh

for PACKAGE in $PACKAGES
do
        cd ${PACKAGEDIR}/${PACKAGE}
        PACKAGEINFO=`find . -type d -path './*' -prune -print |cut -c 3-`
	    cd ${PACKAGEDIR}/${PACKAGE}/${PACKAGEINFO}
        NAME=`echo $PACKAGEINFO | awk -F'-' '{ print $1 }'`
        VERS=`echo $PACKAGEINFO | awk -F'-' '{ print $2 }'`
		#Ensure we have a fresh and clean installation environment
        /usr/bin/rm -r /tmp/testvenv >/dev/null 2>&1
        python3.8 -m venv /var/lib/awxrpm >/dev/null 2>&1
        source /var/lib/awxrpm/bin/activate >/dev/null 2>&1
        touch ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep
		#only install dependent packages
        for DEP in `cat ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep`
        do
             pip install $DEP >/dev/null 2>&1
             if [[ $? == 0 ]];
             then
                    echo "$COUNT `date`: $PACKAGE dependend on $DEP : installed"
             else
                    echo "$COUNT `date`: $DEP ERROR: failed to install"
                    exit
             fi
        done
	#Build a package specfile
	python setup.py bdist_rpm --spec-only >/tmp/$PACKAGE.bdist.out 2>/tmp/$PACKAGE.bdist.err 
	if [[ $? == 0 ]];
	then	
        echo "$COUNT `date`: $PACKAGE OK: rpm created" >/dev/null 2>&1
	else
        echo "$COUNT `date`: $PACKAGE OK: rpm creation failed" >/dev/null 2>&1
	fi
	# use the SPEC file
	pip install --upgrade pip >/dev/null 2>&1
	pip install spec2scl >/dev/null 2>&1
	TOPDIR="/root/rpmbuild" 
	SPECFILE="${PACKAGEDIR}/${PACKAGE}/${PACKAGEINFO}/dist/${PACKAGE}.spec"
	SCLSPECFILE="${PACKAGEDIR}/${PACKAGE}/${PACKAGEINFO}/dist/${PACKAGE}.scl.spec"
	SRCFILE=${NAME}-${VERS}.tar.gz
	DSTFILE=${PREFIX}-${NAME}-${VERS}.tar.gz
	if [[ -f $SPECFILE ]];
	then
        	echo "$COUNT `date`: $PACKAGE OK: specfile exists" >/dev/null 2>&1
		spec2scl ${SPECFILE}| sed "s#%build#%buildLINEBREAKpython3 -m venv /opt/miracle/miracle-awxLINEBREAKsource /opt/miracle/miracle-awx/bin/activate#"|sed "s/LINEBREAK/\n/g"  > ${SCLSPECFILE}
		echo ${PACKAGEDIR}/${PACKAGE}/${SRCFILE}
		echo $VERS
	    	cp ${PACKAGEDIR}/${PACKAGE}/${SRCFILE} ${TOPDIR}/SOURCES/${DSTFILE}
		if [[ $? == 0 ]];
		then
        		echo "`date`: $PACKAGE OK: rpm scl build prep succeeded " 
		else
	    		ls -lrt
			exit
		fi
		cd ${TOPDIR}/SOURCES
		tar xf ${TOPDIR}/SOURCES/${DSTFILE}  >/dev/null 2>&1
		/usr/bin/rm -r ${PREFIX}-${NAME}-${VERS} >/dev/null 2>&1
		mv ${NAME}-${VERS} ${PREFIX}-${NAME}-${VERS} >/dev/null 2>&1
		rm ${TOPDIR}/SOURCES/${DSTFILE} >/dev/null 2>&1 
		tar czf ${TOPDIR}/SOURCES/${DSTFILE} ./${PREFIX}-${NAME}-${VERS} >/dev/null 2>&1
		echo "rpmbuild -ba $SCLSPECFILE --define \"scl ${PREFIX}\" >/dev/null 2>/tmp/${NAME}.${VERS}.err  ">> /tmp/builder.sh
		if [[ $? == 0 ]];
		then
        		echo "`date`: $PACKAGE OK: rpm scl build prep succeeded " 
		else
        		echo "`date`: $PACKAGE ERROR: rpm scl build failed " 
		fi
	else
        	echo "`date`: $PACKAGE ERROR: specfile missing" 
	fi
done




