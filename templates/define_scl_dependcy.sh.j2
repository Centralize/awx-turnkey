#!/usr/bin/bash

PACKAGEDIR="/tmp/awx/packages"

PACKAGES=`ls -1 ${PACKAGEDIR} | tr 'A-Z' 'a-z'`
COUNT=0
LOOP="TRUE"
while [[ $LOOP == "TRUE" ]];
do	
	LOOP="FALSE"
	for PACKAGE in $PACKAGES
	do
		cd ${PACKAGEDIR}/${PACKAGE}
		PACKAGEINFO=`find . -type d -path './*' -prune -print |cut -c 3-`  
		NAME=`echo $PACKAGEINFO | awk -F'-' '{ print $1 }'`
		VERS=`echo $PACKAGEINFO | awk -F'-' '{ print $2 }'`
		cd ${PACKAGEDIR}/${PACKAGE}/${PACKAGEINFO}
		ls  |grep  PKG-INFO >/dev/null 2>&1
		if [[ $? == 0 ]];
		then 	
			cp PKG-INFO ${PACKAGEDIR}/${PACKAGE}/${PACKAGEINFO}.PKG-INFO
		else
			echo "Autogenerated due to lack of PKG-INFO file" > ${PACKAGEDIR}/${PACKAGE}/${PACKAGEINFO}.PKG-INFO
		fi
	
		if [[ -f ${PACKAGEDIR}/${PACKAGE}/pipfreeze.virgin.txt ]];
		then
					echo "$COUNT `date`: $PACKAGE : cached" >/dev/null 2>&1
		else
			/usr/bin/rm -r /tmp/testvenv >/dev/null 2>&1	
			python3.8 -m venv /tmp/testvenv
			source /tmp/testvenv/bin/activate >/dev/null 2>&1
			touch ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep
			for DEP in `cat ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep`
			do
				pip install $DEP >/dev/null 2>&1
				if [[ $? == 0 ]];
				then 
					echo "$COUNT `date`: $PACKAGE dependend on $DEP : installed"
				else	
					echo "$COUNT `date`: $DEP ERROR: failed to install"
					exit
				fi
			done
			pip install . >/dev/null 2>&1
			if [[ $? == 0 ]];
			then
				echo "`date`: $PACKAGE pip install succeeded"
				pip freeze > ${PACKAGEDIR}/${PACKAGE}/pipfreeze.virgin.txt
			else
			
 
				
				python setup.py install   >/dev/null 2>&1
				python setup.py install  >  ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.log 2>${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err
				if [[ $? == 0 ]];
				then
					echo "`date`: $PACKAGE build succeeded"
					pip freeze > ${PACKAGEDIR}/${PACKAGE}/pipfreeze.virgin.txt
				else
					echo "$COUNT `date`: $PACKAGE : build failed"
					echo "--------------------------------------------------------------------------------"
					cat ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err
					echo "--------------------------------------------------------------------------------"
					rm ${PACKAGEDIR}/${PACKAGE}/pipfreeze.virgin.txt >/dev/null 2>&1
					cat ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err |grep "No module named" |awk -F"'" '{ print $2 }'  |sort -u >> ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep

					grep "No such file or directory" ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err >/dev/null 2>&1
					if [[ $? == 0 ]];
					then
						FILENAME=`grep "No such file or directory" ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err  |awk -F"'" '{ print $2 }'`
						touch  $FILENAME
					fi


					grep "pyasn1" ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err >/dev/null 2>&1
					if [[ $? == 0 ]];
					then 
						#if this text is in the error message you probably need the cryptographi module"
						echo "cryptography" >> ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep
					fi

					cat ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep  |sort -u >${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep.new

					mv ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep.new ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep
					LOOP="TRUE"
					#tail ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.err
				fi
			fi
		fi
	done
	COUNT=$((COUNT+1))
done



for PACKAGE in $PACKAGES
do
	cd ${PACKAGEDIR}/${PACKAGE}
	PACKAGEINFO=`find . -type d -path './*' -prune -print |cut -c 3-`  
	NAME=`echo $PACKAGEINFO | awk -F'-' '{ print $1 }'`
	VERS=`echo $PACKAGEINFO | awk -F'-' '{ print $2 }'`
	cat *txt  |grep -iv "${PACKAGE}==" |wc -l |grep "^0$" >/dev/null 2>&1
	if [[ $? == 0 ]];
	then
		echo "$COUNT `date`: $PACKAGE : no dependencies" >/dev/null 2>&1
	else
		DEPEND_ON=`cat *txt  |grep -v "${PACKAGE}==" |tr '\n' ','| tr -d ' ' `
		echo "$COUNT `date`: $PACKAGE : depends on $DEPEND_ON"
		for DEPPKG in `echo $DEPEND_ON|tr ',' '\n'`
		do
			echo $DEPPKG
		done
	
	fi
done


for PACKAGE in $PACKAGES
do
        cd ${PACKAGEDIR}/${PACKAGE}
        PACKAGEINFO=`find . -type d -path './*' -prune -print |cut -c 3-`
	cd ${PACKAGEDIR}/${PACKAGE}/${PACKAGEINFO}
        NAME=`echo $PACKAGEINFO | awk -F'-' '{ print $1 }'`
        VERS=`echo $PACKAGEINFO | awk -F'-' '{ print $2 }'`
        /usr/bin/rm -r /tmp/testvenv >/dev/null 2>&1
        python3.8 -m venv /var/lib/awxrpm
        source /var/lib/awxrpm/bin/activate >/dev/null 2>&1
        touch ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep
        for DEP in `cat ${PACKAGEDIR}/${PACKAGE}/$PACKAGE.build.dep`
        do
             pip install $DEP >/dev/null 2>&1
             if [[ $? == 0 ]];
             then
                    echo "$COUNT `date`: $PACKAGE dependend on $DEP : installed"
             else
                    echo "$COUNT `date`: $DEP ERROR: failed to install"
                    exit
             fi
        done
	#python setup.py bdist _
	ls dist/*.src.rpm >/dev/null 2>&1
	if [[ $? == 0 ]];
	then
                echo "$COUNT `date`: $PACKAGE OK: rpm exists" >/dev/null 2>&1
		RPM=`ls -1 dist |grep src 2>/dev/null`
		rpmbuild -rp  dist/$RPM >/dev/null 2>&1
	else
                echo "$COUNT `date`: $PACKAGE ERROR: rpm missing" 
	fi
done



